<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>图像模糊</title>
      <link href="/2023/04/05/%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A/"/>
      <url>/2023/04/05/%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A/</url>
      
        <content type="html"><![CDATA[<h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>图像模糊又称为图像平滑，是图像处理中最简单和常用的操作之一，使用该操作就是为了给图像降低噪音。图像模糊处理包括：高斯模糊、均值滤波、中值滤波、双边滤波等。模糊滤波其实就是图像的卷积计算，通常这些卷积算子都是线性计算，所以又叫线性滤波。<br>链接：<a href="https://blog.csdn.net/qq_41480046/article/details/86579267?ops_request_misc=&request_id=&biz_id=102&utm_term=opencv%E6%A8%A1%E7%B3%8A&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-.pc_search_result_control_group&spm=1018.2226.3001.4187">【OpenCv】图像模糊处理(滤波)</a><br><img src="/%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A/1.png"></p><p> <strong>1.</strong> 均值滤波：<br>将黄色卷积核覆盖的9个像素值求平均值代替红色方框位置的像素值。<br>blur(src,dst,size(x,y),point(-1,-1))；<br>Size:（用于平滑操作的核的大小）<br>Size(1, 15);     &#x2F;&#x2F;y方向模糊运动<br>point默认参数值为(-1，-1)代表将均值赋给卷积核的中间位置。<br><img src="/%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A/2.png"></p><p> <strong>2.</strong> 高斯滤波：<br> 参考：<a href="https://www.cnblogs.com/wangguchangqing/p/6407717.html">高斯滤波器详解</a>，<a href="https://www.cnblogs.com/pacino12134/p/9856995.html">三种模糊操作</a><br> <img src="https://img-blog.csdnimg.cn/3029d3c9a3144abf9519abb43d434ef8.png#pic_center" alt="在这里插入图片描述"><br><img src="/%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A/3.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//均值滤波，高斯滤波（避免本身很大，旁边很小，然后就总体变小；正太分布，权重分配）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Mat src, src2, dst;</span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;D:/PT/stone.jpg&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!src.data) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;could not load image...\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> scale = <span class="number">0.5</span>;</span><br><span class="line">Size dsize = <span class="built_in">Size</span>(src.cols * scale, src.rows * scale);</span><br><span class="line"><span class="comment">//Mat src2 = Mat(dsize, CV_32S);</span></span><br><span class="line"><span class="built_in">resize</span>(src, src2, dsize);</span><br><span class="line"><span class="type">char</span> input[] = <span class="string">&quot;input image&quot;</span>;</span><br><span class="line"><span class="type">char</span> output[] = <span class="string">&quot;output image&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">namedWindow</span>(input, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">namedWindow</span>(output, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">namedWindow</span>(<span class="string">&quot;output_Gaussian&quot;</span>, CV_WINDOW_AUTOSIZE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(input, src2);</span><br><span class="line"><span class="built_in">blur</span>(src2, dst, <span class="built_in">Size</span>(<span class="number">5</span>, <span class="number">5</span>), <span class="built_in">Point</span>(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line"><span class="comment">//Size(1, 15);//y方向模糊运动</span></span><br><span class="line"><span class="comment">//Size:（用于平滑操作的核的大小）</span></span><br><span class="line"><span class="comment">//Point:（锚点，默认值为Point(-1,-1)表示锚点在核的中心）</span></span><br><span class="line"><span class="built_in">imshow</span>(output, dst);</span><br><span class="line"></span><br><span class="line">Mat dst2;</span><br><span class="line"><span class="built_in">GaussianBlur</span>(src2, dst2, <span class="built_in">Size</span>(<span class="number">5</span>, <span class="number">5</span>), <span class="number">11</span>, <span class="number">11</span>);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;output_Gaussian&quot;</span>, dst2);</span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>3.</strong> 中值滤波：<br>取中位数；<br>对去椒盐噪声有很好的效果！为什么可以去除椒盐噪声呢？因为椒盐噪声像素值要么很小为0，要么很大为255，而取中间值话，就会用替代这些，从而给图像去噪点。<br><img src="/%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A/4.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">medianBlur</span>(src, dst, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>   <img src="/%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A/5.png"></p><pre><code>中值模糊的ksize大小必须是大于1而且必须是奇数。</code></pre><p> <strong>4.</strong> 双边滤波：<br>链接：<a href="https://blog.csdn.net/qq_36359022/article/details/80198890">OpenCV双边滤波详解及实代码实现</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bilateralFilter</span>(dst, dst2, <span class="number">15</span>, <span class="number">100</span>, <span class="number">3</span>);</span><br><span class="line"><span class="number">15</span> –计算的半径，半径之内的像数都会被纳入计算，如果提供<span class="number">-1</span> 则根据sigma space参数取值</span><br><span class="line"><span class="number">-150</span> – sigma color 决定多少差值之内的像素会被计算</span><br><span class="line"><span class="number">3</span> – sigma space 如果d的值大于<span class="number">0</span>则声明无效，否则根据它来计算d值</span><br></pre></td></tr></table></figure><p><img src="/%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A/6.png"><br><img src="https://img-blog.csdnimg.cn/3b8a4fb2862f45dc9b90606fc2f2fe99.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>注</strong>：因为之前一直要缩放图片，所以很不方便，索性写到这里吧：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> scale = <span class="number">0.5</span>;</span><br><span class="line">Size dsize = <span class="built_in">Size</span>(src.cols * scale, src.rows * scale);</span><br><span class="line"><span class="comment">//Mat src2 = Mat(dsize, CV_32S);</span></span><br><span class="line"><span class="built_in">resize</span>(src, dst, dsize);</span><br></pre></td></tr></table></figure><p>需要注意的是缩小后再发放大会变模糊：<br><img src="/%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A/8.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>选Mac还是PC</title>
      <link href="/2022/12/31/%E9%80%89Mac%E8%BF%98%E6%98%AFPC/"/>
      <url>/2022/12/31/%E9%80%89Mac%E8%BF%98%E6%98%AFPC/</url>
      
        <content type="html"><![CDATA[<p>这是一个值的商榷的问题！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>德劳内三角</title>
      <link href="/2022/12/31/%E5%BE%B7%E5%8A%B3%E5%86%85%E4%B8%89%E8%A7%92/"/>
      <url>/2022/12/31/%E5%BE%B7%E5%8A%B3%E5%86%85%E4%B8%89%E8%A7%92/</url>
      
        <content type="html"><![CDATA[<h1 id="德劳内三角（DelaunayTriangulation）"><a href="#德劳内三角（DelaunayTriangulation）" class="headerlink" title="德劳内三角（DelaunayTriangulation）"></a>德劳内三角（DelaunayTriangulation）</h1><h2 id="1、定义："><a href="#1、定义：" class="headerlink" title="1、定义："></a>1、定义：</h2><p>它是对于平面上给定的一组离散的点集，对它进行<strong>三角划分</strong>。<br>Delaunay三角剖分其实并不是一种算法，它只是给出了一个“好的”三角网格的定义，它的优秀特性是<strong>空圆特性</strong>和<strong>最大化最小角</strong>特性，这两个特性避免了狭长三角形的产生，也使得Delaunay三角剖分应用广泛。<br>空圆特性其实就是对于两个共边的三角形，任意一个三角形的外接圆是空圆，不含有任何点，这种形式的剖分产生的最小角最大。<br>　　<img src="https://img-blog.csdnimg.cn/8be405b59e864c63a4edbbad8fad0aad.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/f8174a34661b4462b034d03b58dbead2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="2、维诺图（Voronoi-diagram）："><a href="#2、维诺图（Voronoi-diagram）：" class="headerlink" title="2、维诺图（Voronoi diagram）："></a>2、维诺图（Voronoi diagram）：</h2><h5 id="对相邻的两个点之间作垂直频平分线，所构成的图叫又称泰森多边形。"><a href="#对相邻的两个点之间作垂直频平分线，所构成的图叫又称泰森多边形。" class="headerlink" title="对相邻的两个点之间作垂直频平分线，所构成的图叫又称泰森多边形。"></a>对相邻的两个点之间作垂直频平分线，所构成的图叫又称泰森多边形。</h5><p><img src="https://img-blog.csdnimg.cn/03691a03f2af46c7a667a1ca379cff1c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center"></p><h5 id="它和德劳内三角网是对偶（Duality）的关系。"><a href="#它和德劳内三角网是对偶（Duality）的关系。" class="headerlink" title="它和德劳内三角网是对偶（Duality）的关系。"></a>它和德劳内三角网是对偶（Duality）的关系。</h5><p>维诺图中的点是德劳内三角网三角形外接圆的圆心。<br><img src="https://img-blog.csdnimg.cn/79de9bbbae0c41adb4af9506054ab1e7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center"></p><p>维诺图中两个点之间之所以连一条边，是因为反映的是德劳内三角网的三角形的邻接关系。</p><h2 id="3、唯一性："><a href="#3、唯一性：" class="headerlink" title="3、唯一性："></a>3、唯一性：</h2><h6 id="四点共圆是合法的："><a href="#四点共圆是合法的：" class="headerlink" title="四点共圆是合法的："></a>四点共圆是合法的：</h6><p><img src="https://img-blog.csdnimg.cn/9d5dd1a4f2fa4152924d6e0022ad2f93.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="如果不存在四点共圆，必然出现一种情况是合法的，也就是唯一性。"><a href="#如果不存在四点共圆，必然出现一种情况是合法的，也就是唯一性。" class="headerlink" title="如果不存在四点共圆，必然出现一种情况是合法的，也就是唯一性。"></a>如果不存在四点共圆，必然出现一种情况是合法的，也就是唯一性。</h5><p><img src="https://img-blog.csdnimg.cn/214d0441b3e543dea8ba0949625aef66.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="4、判断点的位置？"><a href="#4、判断点的位置？" class="headerlink" title="4、判断点的位置？"></a>4、判断点的位置？</h2><p><img src="https://img-blog.csdnimg.cn/d9ca7ad07994456fabc50abf27d0f01a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/c7852db2e4534912934da8c7054610e8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="5、双向链接边表"><a href="#5、双向链接边表" class="headerlink" title="5、双向链接边表:"></a>5、双向链接边表:</h2><p><img src="https://img-blog.csdnimg.cn/ab4720a294cd4d4daefddc9b94edc0fc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下面那条公式是欧拉公式。<br><img src="https://img-blog.csdnimg.cn/822a404e4c9349d280832e64ba7a4b0a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/163ebf8a653e45e397e592d24f837312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4962050ce2584da78554d9094a2053e0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0852b177202143a28283d5947917f02c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>怎么读图呢？<br>可以通过<strong>f1</strong>找它的半边，一直一直找它的后继，就可以访问面所围成的半边；通过<strong>v2</strong>找它的后继，再访问它的<strong>twin</strong>，一直重复，来遍历一个顶点的所有入度出度。</p><h2 id="6、如何在DCEL结构中添加结点呢？"><a href="#6、如何在DCEL结构中添加结点呢？" class="headerlink" title="6、如何在DCEL结构中添加结点呢？"></a>6、如何在DCEL结构中添加结点呢？</h2><p>会引起一张平面被撕裂成三张平面，引入6条半边，一个顶点，并且会大量的对原先的三条半边进行前驱后继的修改。<br><img src="https://img-blog.csdnimg.cn/a889d7634cf9407fa6f033602dff2024.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>原先<strong>e1</strong>的前驱是<strong>e2</strong>,现在变为了<strong>e3</strong>。</p><p><img src="https://img-blog.csdnimg.cn/d1c480495c114211960235cd9c45f31d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/004470e83e53495887d96bbd0c1cfa27.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>半边修改的地方比较多。</p><h2 id="7、边翻转"><a href="#7、边翻转" class="headerlink" title="7、边翻转"></a>7、边翻转</h2><p>将原先的两条半边删除，引入两条新的半边。<br><img src="https://img-blog.csdnimg.cn/695c4a4f1fc8466f9cd50625ac817048.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/221188f82d9a45d1b8f4ca3fcbfd13da.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fbd16de769324c018d3713b4ad55a4cc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="8、算法的执行（The-Implemation-of-RIC）："><a href="#8、算法的执行（The-Implemation-of-RIC）：" class="headerlink" title="8、算法的执行（The Implemation of RIC）："></a>8、算法的执行（The Implemation of RIC）：</h2><h5 id="已掌握的技能（Mastered-skills）："><a href="#已掌握的技能（Mastered-skills）：" class="headerlink" title="已掌握的技能（Mastered skills）："></a>已掌握的技能（Mastered skills）：</h5><p><em>注：真不是屌英语，是英语真的很重要！！！</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">InTriangleTest</span>(a,b,c,s); <span class="comment">//判断一个点是否在三角形的内部</span></span><br><span class="line"><span class="built_in">IncircleTest</span>(a,b,c,s);<span class="comment">//判断一个点是否在三角形外接圆的内部</span></span><br><span class="line"><span class="built_in">AddingAvertex</span>(<span class="built_in">DT</span>(p),s);<span class="comment">//增加一个节点</span></span><br><span class="line"><span class="built_in">Edgeflipping</span>(*);<span class="comment">//边翻转</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2039e99cf6cd4bca967b3c3272e5dabf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>首先引入<strong>一个超三角形</strong>，它是做够大的三角形，以至于它把所有输入的点都包含在内；<strong>插入第一个点</strong>，这时仍能保持德劳内三角网，不需要进行修改；<strong>插入第二个节点</strong>的时候引入三条可移边，这三条边会<strong>连续进行边翻转操作</strong>；第一条边是超三角形的边，不需要进行边翻转，剔除；<img src="https://img-blog.csdnimg.cn/eab04a0c9f0d401e9bd92b85e9ea7c66.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5a7a6175a5b54a20a47a956471d48234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b1e93185f5dc43339d884ab3f8624ceb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>再引入一个点，去除外围边；</strong><img src="https://img-blog.csdnimg.cn/ebb726783d034a29b520884bfec93921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>剔除并进行翻转；</strong><br><img src="https://img-blog.csdnimg.cn/2655bb97a52648a99f4537395e3d1a55.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>引入两条可移边，并判断，发现可行；</strong><br><img src="https://img-blog.csdnimg.cn/f421f98a85764a308e0a17b746f5e8d0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/d0f71b214a2e4404833ca56bd1aba568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>最后一条边判断，发现仍然可行，此时就完成了对三个节点，进行的德劳内三角网构造的算法；最后判断这三个点构成的三角形外接圆包不包含超三角形的三个顶点，不包含就将它输出；最终的到的是这个三角形，也就是一张德劳内三角网。</strong><br><img src="https://img-blog.csdnimg.cn/cdba23c24e15426d811186f2b49beb8b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="9、算法思考？"><a href="#9、算法思考？" class="headerlink" title="9、算法思考？"></a>9、算法思考？</h2><h4 id="如何进行点定位？"><a href="#如何进行点定位？" class="headerlink" title="如何进行点定位？"></a>如何进行点定位？</h4><p><strong>是怎么找到这个点是在这个面内的呢</strong>？引入一种结构——<strong>桶</strong>。<br>刚开始的节点都在超三角形内部，这些节点构成了一个桶，从桶中随机挑选一个节点，进行插入，它会把这个面撕裂成三个部分，与此同时，点也被撕裂成了三个部分；那么下次随机挑选一个点的时候，只需要找到这个点所对应的桶号，桶号与点号建立了一一对应的关系。<br><img src="https://img-blog.csdnimg.cn/8332bd3a82f248ee8593e14b6a8c7011.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在边翻转的过程中，点发生了什么变化呢？<br>显然我们只需要将这两个面内的所有节点进行归类，判断这个点是否在新的面内，如果在的话就加入这个桶，不在的话就加入另一个桶。</p><p><img src="https://img-blog.csdnimg.cn/e373dac8c50e4e1c8dd4d3b213155c85.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="10、这个算法是正确的吗？是可靠的吗？"><a href="#10、这个算法是正确的吗？是可靠的吗？" class="headerlink" title="10、这个算法是正确的吗？是可靠的吗？"></a>10、这个算法是正确的吗？是可靠的吗？</h2><p>它能实现德劳内三角网的构造吗？<br><img src="https://img-blog.csdnimg.cn/8111a673d19a4699ab9a2f85f7189f5d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>每次边翻转都会靠近蓝色的曲线，直到最后这个序列变成了蓝线；<br>显然，这张网中只会唯一得存在一个从小到大的序列，它是最平均的；<br>所以这个算法能够实现将离散的点集进行delanuay三角化。</p><h2 id="11、算法性能："><a href="#11、算法性能：" class="headerlink" title="11、算法性能："></a>11、算法性能：</h2><p>在期望意义上讲时间和空间复杂度是不会超过O(nlogn) 和O(n)的。</p><blockquote><p>Abstract<br>In this paper we give a new randomized incremental algorithm for the construction of planar Voronoi diagrams and Delaunay triangulations. The new algorithm is more “online” than earlier similar methods, takes <strong>expected</strong> time <strong>O(nlog n)</strong> and space <strong>O(n)</strong>, and is eminently practical to implement. The analysis of the algorithm is also interesting in its own right and can serve as a model for many similar questions in both two and three dimensions. Finally we demonstrate how this approach for constructing Voronoi diagrams obviates the need for building a separate point-location structure for nearest-neighbor queries.</p></blockquote><p><strong>RIC</strong>算法主要的<strong>time cost</strong>在<strong>edge-flipping</strong> 和bucket的<strong>point location</strong>上面，所以将它们相加求和，就可以算出时间复杂度(<strong>time complexity</strong>).</p><p><img src="https://img-blog.csdnimg.cn/bddd3bd877fd4f0aaaf25e5c683a5307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>我们在三角网中插入节点的时候，实际上进行的<strong>边翻转操作</strong>是在将那些不合法的边都<strong>剔除</strong>，然后将最外层的星形多边形上的点全部向节点引一条连线，这样就将它调整成了一个德劳内三角网；而调整所需要的数量，这些边翻转的操作刚好等于新型多边形边的数量，也等于向点引入的数量；它是不会超过6条的。<br><strong>也就是说</strong>，我们只需要常数次的操作，就能将插入节点所引起的变化，调整为一个合法的德劳内三角网。<br><img src="https://img-blog.csdnimg.cn/b6bb95615c5d4861bd212c3ed31b0ce3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/dbdfa79c70784151b190f115d3448eba.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="12、应用："><a href="#12、应用：" class="headerlink" title="12、应用："></a>12、应用：</h2><p><strong>三维建模，low poly低多边形，面部构建等等。</strong><br><img src="https://img-blog.csdnimg.cn/a929fd295c8240cd8e4c18df135e4fb3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b0c394826b5c410aabac555891ea4816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/dbc89d9a34bb4d179c8ec869964f0d2e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/b04d30566bd34de8a2d31c6ca4a66ac9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7da7365947bc4642a9aa26a7a3857a47.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/a65dcc903e6348f596229d66f96eddc4.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5ODM4NjU2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2022/12/31/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/12/31/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>—测试一下博客</p><h3 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h3><p>德善啊！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
